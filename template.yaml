AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Core components for the Identity Reuse Service

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - local
      - dev
      - build
      - staging
      - integration
      - production
    Default: local
  ApiStageName:
    Description: The stage name of the API
    Type: String
    Default: v1
  CSLSSubscriptionEndpointArn:
    Type: String
    Description: CSLS Subscription endpoint
    Default: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
  ApplicationName:
    Description: The name of the application
    Type: String
    Default: id-reuse-service

  ApplicationConfigName:
    Description: The name of the applications configuration
    Type: String
    Default: id-reuse-config

  OwnerTagValue:
    Description: Value for the Owner Tag
    Type: String
    Default: trust_and_reuse@digital.cabinet-office.gov.uk

  ProductTagValue:
    Description: Value for the Product Tag
    Type: String
    Default: GOV.UK One Login

  SourceTagValue:
    Description: Value for the Source Tag
    Type: String
    Default: govuk-one-login/ipv-identity-reuse-service/template.yaml

  SystemTagValue:
    Description: Value for the System Tag
    Type: String
    Default: Re-use identity service

  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: none

  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Default: none

  VpcStackName:
    Description: VPC Stack name
    Type: String
    Default: none

  DynatraceNodeLayerArn:
    Type: String
    Description: The ARN of the OneAgent Node layer for Lambda Node functions
    Default: "arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1"

  LogGroupRetentionInDays:
    Description: The number of days a log group should retain logs
    Type: Number
    MinValue: "1"
    Default: "30"

  LambdaDeploymentPreference:
    Description: "Specifies the configuration to enable gradual Lambda deployments."
    Type: String
    Default: "AllAtOnce"
    AllowedValues:
      - AllAtOnce
      - Canary10Percent5Minutes
      - Canary10Percent10Minutes
      - Canary10Percent15Minutes
      - Canary10Percent30Minutes
      - Linear10PercentEvery10Minutes
      - Linear10PercentEvery1Minute
      - Linear10PercentEvery2Minutes
      - Linear10PercentEvery3Minutes
      - LambdaCanary50Percent5Minutes

  SharedStackName:
    Description: The name of the Identity Reuse Service Shared Stack
    Type: String
    Default: reuse-identity-shared

  MainCloudWatchMetricNamespace:
    Description: The name of the metric namespace
    Type: String
    Default: IdentityReuseService

  MainStackName:
    Description: The name of the Main VC Storage stack
    Type: String
    Default: identity-reuse-service-main

Mappings:
  EnvironmentMap:
    "local":
      txmaAccountId: "275907361037"
      dynatraceSecretArn: "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables"
      messageQueueArn: "unused"
      messageQueueKeyArn: "unused"
      ApiRateLimit: 5 # allowed requests per second
      ApiBurstLimit: 5 # requests the API can handle concurrently
      IPVCoreVPCID: vpc-093ac0375aa3f291d # ID Reuse Service VPC ID
      UniqueVPCEndpointIDs: none
      UseCanary: false
    "dev":
      txmaAccountId: "275907361037"
      dynatraceSecretArn: "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables"
      messageQueueArn: "unused"
      messageQueueKeyArn: "unused"
      ApiRateLimit: 5 # allowed requests per second
      ApiBurstLimit: 5 # requests the API can handle concurrently
      IPVCoreVPCID: vpc-093ac0375aa3f291d # ID Reuse Service VPC ID
      UniqueVPCEndpointIDs: none
      UseCanary: false
    "build":
      txmaAccountId: "779873699903"
      dynatraceSecretArn: "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables"
      messageQueueArn: "unused"
      messageQueueKeyArn: "unused"
      ApiRateLimit: 5 # allowed requests per second
      ApiBurstLimit: 5 # requests the API can handle concurrently
      IPVCoreVPCID: vpc-08d7c4b3c5e2a0d9a # ID Reuse Service Build VPC ID
      UniqueVPCEndpointIDs: vpce-0edf9e66222007102 # IPV Build VPCE ID
      UseCanary: false
    "staging":
      txmaAccountId: "178023842775"
      dynatraceSecretArn: "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables"
      messageQueueArn: "arn:aws:sqs:eu-west-2:178023842775:self-staging-EC-SQS-Output-Queue-identityreuse"
      messageQueueKeyArn: "arn:aws:kms:eu-west-2:178023842775:key/325458a5-de28-4c28-aaf0-678ebefb35ac"
      ApiRateLimit: 5 # allowed requests per second
      ApiBurstLimit: 5 # requests the API can handle concurrently
      IPVCoreVPCID: vpc-039e664a2b3abb03e # ID Reuse Service Staging VPC ID
      UniqueVPCEndpointIDs: vpce-0cc0de10742b83b8a # IPV Staging VPCE ID
      UseCanary: true
    "integration":
      txmaAccountId: "729485541398"
      dynatraceSecretArn: "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables"
      messageQueueArn: "arn:aws:sqs:eu-west-2:729485541398:self-integration-EC-SQS-Output-Queue-identityreuse"
      messageQueueKeyArn: "arn:aws:kms:eu-west-2:729485541398:key/c199c69c-7ce7-4a82-b5a7-b344c7ac04f5"
      ApiRateLimit: 2000 # allowed requests per second
      ApiBurstLimit: 2000 # requests the API can handle concurrently
      IPVCoreVPCID: vpc-0a9e773e1f32b6697 # ID Reuse Service Integration VPC ID
      UniqueVPCEndpointIDs: vpce-0f47068fdf9ad0c3d # IPV Int VPCE ID
      UseCanary: true
    "production":
      txmaAccountId: "451773080033"
      dynatraceSecretArn: "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables"
      messageQueueArn: "arn:aws:sqs:eu-west-2:451773080033:self-production-EC-SQS-Output-Queue-identityreuse"
      messageQueueKeyArn: "arn:aws:kms:eu-west-2:451773080033:key/5b5d3a8e-cf70-49ca-bec8-b3a2e61ce770"
      ApiRateLimit: 2000 # allowed requests per second
      ApiBurstLimit: 2000 # requests the API can handle concurrently
      IPVCoreVPCID: vpc-0274d75007239691f # IPV Reuse Seruice Production VPC ID
      UniqueVPCEndpointIDs: vpce-0e40247a557c2169e # IPV Reuse Seruice Prod VPCE ID
      UseCanary: true

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - none

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - none

  DynaTraceEnabled:
    Fn::Or:
      - Fn::Equals: [!Ref Environment, "build"]
      - Fn::Equals: [!Ref Environment, "staging"]
      - Fn::Equals: [!Ref Environment, "integration"]
      - Fn::Equals: [!Ref Environment, "production"]

  IsDev:
    Fn::Or:
      - Fn::Equals: [!Ref Environment, "local"]
      - Fn::Equals: [!Ref Environment, "dev"]

  IsNotDev: !Not [!Condition IsDev]

  CanariesEnabled: !Equals
    - !FindInMap [EnvironmentMap, !Ref Environment, UseCanary]
    - true

  IsDevOrBuild:
    Fn::Or:
      - Fn::Equals: [!Ref Environment, "local"]
      - Fn::Equals: [!Ref Environment, "dev"]
      - Fn::Equals: [!Ref Environment, "build"]
  UseVpc:
    Fn::Not:
      - Fn::Equals: [!Ref VpcStackName, "none"]

Globals:
  Function:
    MemorySize: 1024
    CodeUri: ./
    Runtime: nodejs20.x
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: !If [DynaTraceEnabled, "/opt/dynatrace", !Ref "AWS::NoValue"]
        DT_CONNECTION_AUTH_TOKEN: !If
          - DynaTraceEnabled
          - !Sub
            - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}"
            - SecretArn: !FindInMap [EnvironmentMap, !Ref Environment, dynatraceSecretArn]
          - !Ref "AWS::NoValue"
        DT_CONNECTION_BASE_URL: !If
          - DynaTraceEnabled
          - !Sub
            - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}"
            - SecretArn: !FindInMap [EnvironmentMap, !Ref Environment, dynatraceSecretArn]
          - !Ref "AWS::NoValue"
        DT_CLUSTER_ID: !If
          - DynaTraceEnabled
          - !Sub
            - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}"
            - SecretArn: !FindInMap [EnvironmentMap, !Ref Environment, dynatraceSecretArn]
          - !Ref "AWS::NoValue"
        DT_LOG_COLLECTION_AUTH_TOKEN: !If
          - DynaTraceEnabled
          - !Sub
            - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}"
            - SecretArn: !FindInMap [EnvironmentMap, !Ref Environment, dynatraceSecretArn]
          - !Ref "AWS::NoValue"
        DT_TENANT: !If
          - DynaTraceEnabled
          - !Sub
            - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}"
            - SecretArn: !FindInMap [EnvironmentMap, !Ref Environment, dynatraceSecretArn]
          - !Ref "AWS::NoValue"
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: !If [DynaTraceEnabled, "true", !Ref "AWS::NoValue"]
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    VpcConfig: !If
      - UseVpc
      - SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
          - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      - !Ref "AWS::NoValue"
    Tracing: Active
    AutoPublishAlias: live
    Layers: !If
      - DynaTraceEnabled
      - - !Ref DynatraceNodeLayerArn
      - !Ref AWS::NoValue
    DeploymentPreference:
      Type: !Ref LambdaDeploymentPreference
      Role: !GetAtt CodeDeployServiceRole.Arn

Resources:
  ################################
  # POST USER IDENTITY FEATURE  #
  ################################
  UserIdentityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-UserIdentityFunction"
      Description: "A lambda function that queues SIS data for processing"
      DeploymentPreference:
        Type: !If
          - CanariesEnabled
          - !Ref LambdaDeploymentPreference
          - AllAtOnce
        Role: !GetAtt CodeDeployServiceRole.Arn
      Timeout: 10
      Handler: user-identity-handler.handler
      MemorySize: 128
      Role: !GetAtt UserIdentityFunctionRole.Arn
      KmsKeyArn: !GetAtt LambdaEnvironmentVariableEncryptionKey.Arn
      VpcConfig: !If
        - UseVpc
        - SecurityGroupIds:
            - Fn::ImportValue: !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
          SubnetIds:
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
        - !Ref "AWS::NoValue"
      Environment:
        Variables:
          METRIC_SERVICE_NAME: "UserIdentityFunction"
          EVCS_API_KEY_SECRET_ARN:
            Fn::ImportValue: !Sub "${SharedStackName}-EVCSApiKeySecret"
          POWERTOOLS_METRICS_NAMESPACE:
            !If [IsDev, !Sub "${AWS::StackName}-UserIdentityFunction", "UserIdentityFunction"]
          POWERTOOLS_SERVICE_NAME: "UserIdentityFunction"
          ENVIRONMENT: !If [IsDev, "dev", !Ref Environment]
          APP_CONFIG_NAME: !Ref ApplicationConfigName
          APP_CONFIG_APPLICATION: !Ref ApplicationName
      CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
      Tags:
        Product: !Ref ProductTagValue
        System: !Ref SystemTagValue
        Environment: !Ref Environment
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/handlers/user-identity-handler.ts
        Format: esm
        Platform: node
        OutExtension:
          - .js=.mjs
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  UserIdentityFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-UserIdentityFunctionRole"
      Description: !Sub "The role assumed by ${AWS::StackName}-UserIdentityFunction"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  UserIdentityFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-UserIdentityFunctionPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: "*"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue" #pragma: allowlist secret
            Resource:
              - Fn::ImportValue: !Sub "${SharedStackName}-EVCSApiKeySecret"
          - Effect: Allow
            Action:
              - "appconfig:StartConfigurationSession"
              - "appconfig:GetLatestConfiguration"
            Resource: "*"
      Roles:
        - !Ref UserIdentityFunctionRole

  RegionalGatewayUserIdentityFunctionResourcePolicy:
    Condition: IsDev
    DependsOn: UserIdentityFunctionAliaslive
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Join
        - ":"
        - - "function"
          - !Select [6, !Split [":", !GetAtt UserIdentityFunction.Arn]]
          - "live"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/${ApiStageName}"

  PrivateGatewayUserIdentityFunctionResourcePolicy:
    DependsOn: UserIdentityFunctionAliaslive
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Join
        - ":"
        - - "function"
          - !Select [6, !Split [":", !GetAtt UserIdentityFunction.Arn]]
          - "live"
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateRestApi}/${ApiStageName}/POST/*"

  PrivateRestApi:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: API Gateway caching not enabled
      Name: !Sub "${AWS::StackName}-PrivateRestApi"
      AlwaysDeploy: true
      OpenApiVersion: 3.0.3
      PropagateTags: true
      DefinitionBody:
        openapi: "3.0.3" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: {} # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "openAPI/api.yaml"
      Description: "Private REST API that provides method to interact with post user identity"
      StageName: !Ref ApiStageName
      Auth:
        ResourcePolicy:
          IntrinsicVpcWhitelist:
            - !FindInMap [EnvironmentMap, !Ref Environment, IPVCoreVPCID]
      AccessLogSetting:
        Format: >-
          {
          "requestId": "$context.requestId",
          "requestTime": "$context.requestTime",
          "requestTimeEpoch": "$context.requestTimeEpoch",
          "httpMethod": "$context.httpMethod",
          "domainName": "$context.domainName",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "protocol": "$context.protocol",
          "status": "$context.status",
          "responseLength": "$context.responseLength",
          "responseLatency": "$context.responseLatency",
          "authorizerLatency": "$context.authorizer.latency",
          "integrationStatus": "$context.integrationStatus",
          "integrationLatency": "$context.integrationLatency",
          "integrationErrorMessage": "$context.integrationErrorMessage",
          "errorMessage": "$context.error.message",
          "errorResponseType": "$context.error.responseType",
          "validationErrorString": "$context.error.validationErrorString",
          "xrayTraceId": "$context.xrayTraceId",
          "apiKeyId": "$context.identity.apiKeyId"
          }
        DestinationArn: !GetAtt PrivateAPIGatewayAccessLogGroup.Arn
      CacheClusterEnabled: false
      TracingEnabled: true
      MethodSettings:
        - MetricsEnabled: true
          ResourcePath: /*
          HttpMethod: "*"
      EndpointConfiguration:
        Type: PRIVATE
        VpcEndpointIds: !If
          - IsDev
          - []
          - !Split [",", !FindInMap [EnvironmentMap, !Ref Environment, UniqueVPCEndpointIDs]]
      Tags:
        CheckovRulesToSkip: CKV_AWS_120
        Product: !Ref ProductTagValue
        System: !Ref SystemTagValue
        Environment: !Ref Environment
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
        FMSRegionalPolicy: false
        CustomPolicy: idprivateapi

  PrivateRestApiIDSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: PrivateRestApi ID
      Name: !Sub /${AWS::StackName}/PrivateRestAPI/ID
      Type: String
      Value: !Ref PrivateRestApi
      Tags:
        Environment: !Ref Environment
        Product: !Ref ProductTagValue
        System: !Ref SystemTagValue
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue

  PrivateAPIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${PrivateRestApi}/${ApiStageName}"
      RetentionInDays: 30
      KmsKeyId: !GetAtt CloudWatchEncryptionKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "/aws/apigateway/${PrivateRestApi}/${ApiStageName}"

  PrivateAPIAccessLogGroupCSLS:
    Condition: IsNotDev
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Ref CSLSSubscriptionEndpointArn
      LogGroupName: !Ref PrivateAPIGatewayAccessLogGroup
      FilterPattern: ""

  PrivateAPIAccessLogGroupNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The ARN of the PrivateAPIAccessLogGroup
      Name: !Sub /${AWS::StackName}/PrivateRestAPI/Access/LogGroup/Name
      Type: String
      Value: !If
        - IsDev
        - !Sub /aws/apigateway/${RestApi}/${ApiStageName}
        - !Sub /aws/apigateway/${PrivateRestApi}/${ApiStageName}
      Tags:
        Environment: !Ref Environment
        Product: !Ref ProductTagValue
        System: !Ref SystemTagValue
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue

  UserIdentityRestApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-UserIdentityRestApiRole"
      Description: !Sub "Update User identity Function related permissions for the ${AWS::StackName}-RestApi Gateway IAM role"
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  UserIdentityRestApiPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-UserIdentityRestApiPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-UserIdentityFunction:*"
      Roles:
        - !Ref UserIdentityRestApiRole

  UserIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UserIdentityFunction}"
      RetentionInDays: 30
      KmsKeyId: !GetAtt CloudWatchEncryptionKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "/aws/lambda/${UserIdentityFunction}"

  MessageProcessorLambda:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
    # checkov:skip=CKV_AWS_116: DLQs are not used for synchronous invocations.
    # checkov:skip=CKV_AWS_173: Check encryption settings for Lambda environmental variable
    DependsOn: MessageProcessorLambdaTriggerPolicy
    Properties:
      FunctionName: !Sub "${AWS::StackName}-MessageProcessorLambda"
      Description: Logs passed in VCs
      Handler: txma-message-processor.handler
      Role: !GetAtt MessageProcessorLambdaTriggerRole.Arn
      Environment:
        Variables:
          POWERTOOLS_METRICS_NAMESPACE:
            !If [IsDev, !Sub "${AWS::StackName}-TXMAMessageProcessor", "TXMAMessageProcessor"]
          POWERTOOLS_SERVICE_NAME: "MessagesReceived"
          EVCS_API_KEY_SECRET_ARN:
            Fn::ImportValue: !Sub "${SharedStackName}-EVCSApiKeySecret"
          ENVIRONMENT: !If [IsDev, "dev", !Ref Environment]
          APP_CONFIG_NAME: !Ref ApplicationConfigName
          APP_CONFIG_APPLICATION: !Ref ApplicationName
          SQS_AUDIT_EVENT_QUEUE_URL: !Ref AuditEventQueue
      Tags:
        Product: !Ref ProductTagValue
        System: !Ref SystemTagValue
        Environment: !Ref Environment
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
        Name: !Sub "${AWS::StackName}-SecretsManagerEncryptionKey"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        EntryPoints:
          - src/handlers/txma-message-processor.ts
        Sourcemap: true
        Target: "es2024"

  MessageProcessorLambdaTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-MessageProcessorLambdaTriggerRole"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-MessageProcessorLambdaTriggerRole"

  MessageProcessorLambdaTriggerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-MessageProcessorLambdaTriggerPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !If
              - IsDevOrBuild
              - !GetAtt StubQueue.Arn
              - !FindInMap [EnvironmentMap, !Ref Environment, messageQueueArn]
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AuditEventQueue.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: !If
              - IsDevOrBuild
              - !GetAtt StubQueueKey.Arn
              - !FindInMap [EnvironmentMap, !Ref Environment, messageQueueKeyArn]
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue" #pragma: allowlist secret
            Resource:
              - Fn::ImportValue: !Sub "${SharedStackName}-EVCSApiKeySecret"
          - Effect: Allow
            Action:
              - "kms:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "appconfig:StartConfigurationSession"
              - "appconfig:GetLatestConfiguration"
            Resource: "*"
      Roles:
        - !Ref MessageProcessorLambdaTriggerRole

  MessageProcessorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-MessageProcessorLambda"
      RetentionInDays: !Ref LogGroupRetentionInDays
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  MessageProcessorLambdaLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDev
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"
      FilterPattern: "{$._aws.CloudWatchMetrics NOT EXISTS}"
      LogGroupName: !Ref MessageProcessorLambdaLogGroup

  MessageProcessorLambdaErrorMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.level = "ERROR"}'
      LogGroupName: !Ref MessageProcessorLambdaLogGroup
      MetricTransformations:
        - MetricName: !Sub "${MessageProcessorLambda}-LambdaError"
          MetricNamespace: !Ref MainCloudWatchMetricNamespace
          MetricValue: "1"

  #######
  # API #
  #######
  RestApi:
    Condition: IsDev
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: API Gateway caching not enabled
      Name: !Sub "${AWS::StackName}-RestApi"
      AlwaysDeploy: true
      OpenApiVersion: 3.0.3
      DefinitionBody:
        openapi: "3.0.3" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: {} # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "openAPI/api.yaml"
      Description: "Regional REST API that provides method to interact with the UserIdentity function"
      StageName: !Ref ApiStageName
      AccessLogSetting:
        Format: >-
          {
          "requestId": "$context.requestId",
          "requestTime": "$context.requestTime",
          "requestTimeEpoch": "$context.requestTimeEpoch",
          "httpMethod": "$context.httpMethod",
          "domainName": "$context.domainName",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "protocol": "$context.protocol",
          "status": "$context.status",
          "responseLength": "$context.responseLength",
          "responseLatency": "$context.responseLatency",
          "authorizerLatency": "$context.authorizer.latency",
          "integrationStatus": "$context.integrationStatus",
          "integrationLatency": "$context.integrationLatency",
          "integrationErrorMessage": "$context.integrationErrorMessage",
          "errorMessage": "$context.error.message",
          "errorResponseType": "$context.error.responseType",
          "validationErrorString": "$context.error.validationErrorString",
          "xrayTraceId": "$context.xrayTraceId",
          "apiKeyId": "$context.identity.apiKeyId"
          }
        DestinationArn: !GetAtt APIGatewayAccessLogGroup.Arn
      CacheClusterEnabled: false
      TracingEnabled: true
      EndpointConfiguration:
        Type: REGIONAL
      DisableExecuteApiEndpoint: false
      Tags:
        CheckovRulesToSkip: CKV_AWS_120
        Product: !Ref ProductTagValue
        System: !Ref SystemTagValue
        Environment: !Ref Environment
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
        FMSRegionalPolicy: false
        CustomPolicy: true

  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsDev
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${RestApi}/${ApiStageName}"
      RetentionInDays: 30
      KmsKeyId: !GetAtt CloudWatchEncryptionKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "/aws/apigateway/${RestApi}/${ApiStageName}"

  ########################
  # IPV Core Usage Plans #
  ########################
  IpvCoreApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: IsDev
    DependsOn:
      - RestApiStage # This resource is created as part of the RestApi resource
    Properties:
      UsagePlanName: !Sub "${AWS::StackName}-IPV Core"
      Description: "Usage plan to limit and throttle call made by IPV Core"
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref ApiStageName
          Throttle:
            "/user-identity/POST":
              RateLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiRateLimit]
              BurstLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiBurstLimit]

      Throttle:
        RateLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiRateLimit]
        BurstLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiBurstLimit]
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-IpvCoreApiUsagePlan"

  IpvCoreApiKey:
    Type: AWS::ApiGateway::ApiKey
    Condition: IsDev
    DependsOn:
      - RestApiStage # This resource is created as part of the RestApi resource
    Properties:
      Description: !Sub >-
        API Key for IPV Core.
        N.B. Does not auto-update if secret (/${AWS::StackName}/Config/API/Key/IPVCore) has changed!
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Ref ApiStageName
      # WARNING - does not get updated if IPVCoreApiKeySecret is updated - manual step in console
      # see https://repost.aws/knowledge-center/cloudformation-stack-update-secrets
      Value: !Sub "{{resolve:secretsmanager:${IPVCoreApiKeySecret}}}"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-IpvCoreApiKey"

  SecretsManagerEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting secrets stored in Secrets Manager
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: secretsmanager.amazonaws.com
            Action:
              - "kms:Decrypt"
              - "kms:ReEncryptTo"
              - "kms:GenerateDataKey"
              - "kms:DescribeKey"
            Resource: "*"
            Condition:
              ArnLike:
                aws:SourceArn:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${AWS::StackName}/Config/*"

  SecretsManagerEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-SecretsManagerEncryptionKey"
      TargetKeyId: !GetAtt SecretsManagerEncryptionKey.Arn

  IPVCoreApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "/${AWS::StackName}/Config/API/Key/IPVCore"
      Description: >-
        Autogenerated API key for the IPV Core usage.
        N.B. Manually update IpvCoreApiKey's value upon change, does not auto-update!
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true # avoids handling escaped chars
        ExcludeUppercase: false
        IncludeSpace: false # avoids handling escaped chars
        RequireEachIncludedType: true
        PasswordLength: 128
      KmsKeyId: !GetAtt SecretsManagerEncryptionKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-IPVCoreApiKeySecret"

  IpvCoreUsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Condition: IsDev
    Properties:
      KeyId: !Ref IpvCoreApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref IpvCoreApiUsagePlan

  IpvCorePrivateApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - PrivateRestApiStage # This resource is created as part of the PrivateRestApi resource
    Properties:
      UsagePlanName: !Sub "${AWS::StackName}-IPV Core"
      Description: "Usage plan to limit and throttle call made by IPV Core"
      ApiStages:
        - ApiId: !Ref PrivateRestApi
          Stage: !Ref ApiStageName
          Throttle:
            "/user-identity/POST":
              RateLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiRateLimit]
              BurstLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiBurstLimit]
      Throttle:
        RateLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiRateLimit]
        BurstLimit: !FindInMap [EnvironmentMap, !Ref Environment, ApiBurstLimit]
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-IpvCorePrivateApiUsagePlan"

  IpvCorePrivateApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - PrivateRestApiStage # This resource is created as part of the PrivateRestApi resource
    Properties:
      Description: !Sub >-
        API Key for IPV Core.
        N.B. Does not auto-update if secret (/${AWS::StackName}/Config/PrivateAPI/Key/IPVCore) has changed!
      Enabled: true
      StageKeys:
        - RestApiId: !Ref PrivateRestApi
          StageName: !Ref ApiStageName
      # WARNING - does not get updated if IPVCorePrivateApiKeySecret is updated - manual step in console
      # see https://repost.aws/knowledge-center/cloudformation-stack-update-secrets
      Value: !Sub "{{resolve:secretsmanager:${IpvCorePrivateApiKeySecret}}}"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-IpvCorePrivateApiKey"

  IpvCorePrivateApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "/${AWS::StackName}/Config/PrivateAPI/Key/IPVCore"
      Description: >-
        Autogenerated API key for the IPV Core usage.
        N.B. Manually update IpvCorePrivateApiKey's value upon change, does not auto-update!
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true # avoids handling escaped chars
        ExcludeUppercase: false
        IncludeSpace: false # avoids handling escaped chars
        RequireEachIncludedType: true
        PasswordLength: 128
      KmsKeyId: !GetAtt SecretsManagerEncryptionKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-IpvCorePrivateApiKeySecret"

  IpvCoreUsagePlanPrivateApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref IpvCorePrivateApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref IpvCorePrivateApiUsagePlan

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Principal:
              Service: !Sub cloudwatch.amazonaws.com
            Action: kms:*
            Resource: "*"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoggingKmsKey"

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
      PermissionsBoundary: !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-CodeDeployServiceRole"

  StubQueueKey:
    Type: AWS::KMS::Key
    Condition: IsDevOrBuild
    Properties:
      Description: KMS key for encrypting SQS messages
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"

  AuditEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref AuditEventQueueEncryptionKeyAlias
      VisibilityTimeout: 70
      MessageRetentionPeriod: 1209600
      RedriveAllowPolicy:
        redrivePermission: denyAll
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AuditEventDeadLetterQueue.Arn
        maxReceiveCount: 10

  AuditEventDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref AuditEventQueueEncryptionKeyAlias

  AuditEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AuditEventQueue
      PolicyDocument:
        Statement:
          - Sid: "AllowReadByTxMAAccount"
            Effect: Allow
            Action:
              - "sqs:ChangeMessageVisibility"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:ReceiveMessage"
            Resource: !GetAtt AuditEventQueue.Arn
            Principal:
              AWS: !FindInMap [EnvironmentMap, !Ref Environment, txmaAccountId]

  AuditEventQueueEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Symmetric key used to encrypt audit messages at rest in SQS
      EnableKeyRotation: true
      KeySpec: SYMMETRIC_DEFAULT
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: Allow decryption of events by TxMA
            Effect: Allow
            Principal:
              AWS: !FindInMap [EnvironmentMap, !Ref Environment, txmaAccountId]
            Action:
              - "kms:decrypt"
            Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-AuditEventQueueEncryptionKey"
        - Key: Stack
          Value: !Sub "${AWS::StackName}"

  AuditEventQueueEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !If
        - IsDev
        - !Sub "alias/${AWS::StackName}/auditEventQueueEncryptionKey"
        - !Sub "alias/${Environment}/auditEventQueueEncryptionKey"
      TargetKeyId: !Ref AuditEventQueueEncryptionKey

  StubQueue:
    Type: AWS::SQS::Queue
    Condition: IsDevOrBuild
    Properties:
      QueueName: !Sub "${AWS::StackName}-stub-queue"
      KmsMasterKeyId: !Ref StubQueueKey

  MessageProcessorLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !If
        - IsDevOrBuild
        - !GetAtt StubQueue.Arn
        - !FindInMap [EnvironmentMap, !Ref Environment, messageQueueArn]
      FunctionName: !GetAtt MessageProcessorLambda.Arn
      Enabled: true

  AuditEventDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Triggers when any message is in the DLQ"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: QueueName
          Value: !Ref AuditEventDeadLetterQueue
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !ImportValue alerting-integration-AlertNotificationTopicArn
      TreatMissingData: notBreaching

  ########
  # KEYS #
  #######

  CloudWatchEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: AWS KMS key for encrypting CloudWatch logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-CloudWatchEncryptionKey"

  CloudWatchEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-CloudWatchEncryptionKey"
      TargetKeyId: !GetAtt CloudWatchEncryptionKey.Arn

  LambdaEnvironmentVariableEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key used to encrypt lambda environment variables"
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:Decrypt"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Name
          Value: !Sub "${AWS::StackName}-LambdaEnvironmentVariableEncryptionKey"

  LambdaEnvironmentVariableEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-LambdaEnvironmentVariableEncryptionKey"
      TargetKeyId: !GetAtt LambdaEnvironmentVariableEncryptionKey.Arn
Outputs:
  ApiEndpoint:
    Description: The URL of the Stored Identity Service API
    Value: !If
      - IsDev
      - !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"
      - !Sub "https://${PrivateRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"

  ApiKeyPath:
    Description: The Path of the Stored Identity Service API Key in Secrets Manager
    Value: !If
      - IsDev
      - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${AWS::StackName}/Config/API/Key/IPVCore"
      - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret://${AWS::StackName}/Config/PrivateAPI/Key/IPVCore"

  AppConfigName:
    Condition: IsDevOrBuild
    Description: App Config name - used for testing.
    Value: !Ref ApplicationConfigName

  AppConfigApplication:
    Condition: IsDevOrBuild
    Description: App Config application name - used for testing.
    Value: !Ref ApplicationName

  AppConfigEnvironment:
    Condition: IsDevOrBuild
    Description: App Config environment - used for testing.
    Value: !Ref Environment
